buildscript {
    apply from: file('gradle/buildscript.gradle'), to: buildscript
}

allprojects {
    repositories {
        mavenLocal()
        jcenter()
        maven { url 'http://dl.bintray.com/content/charliek/maven' }
        // Loading so we can get the spock-snapshot
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
}

apply from: file('gradle/versioning.gradle')
apply from: file('gradle/convention.gradle')
apply from: file('gradle/check.gradle')
apply from: file('gradle/maven.gradle')

allprojects {
    group 'com.charlieknudsen'
}

subprojects {
    dependencies {
        compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
        compile 'joda-time:joda-time:2.1'
        compile 'org.slf4j:jul-to-slf4j:1.7.2'
        compile 'org.slf4j:slf4j-api:1.7.2'
        compile 'com.google.code.findbugs:annotations:2.0.1'

        testCompile "org.spockframework:spock-core:${spockVersion}"
        testCompile 'org.hamcrest:hamcrest-core:1.3'
        testCompile "ch.qos.logback:logback-classic:${logbackVersion}"
        testCompile 'org.slf4j:log4j-over-slf4j:1.7.2'
        testCompile 'com.h2database:h2:1.3.168'

        testRuntime 'cglib:cglib-nodep:2.2.2'
        testRuntime 'org.objenesis:objenesis:1.2'

        //NOTE: DO NOT declare any project dependencies in here
    }
}

project(':blog-api') {
    group "${rootProject.group}.service"
    dependencies {

    }
}

project(':blog-client') {
    group "${rootProject.group}.service"
    dependencies {
        compile project(":blog-api")
    }
}

project(':blog-service') {
    group "${rootProject.group}.service"
    apply from: rootProject.file('gradle/service.gradle')
    apply from: rootProject.file('gradle/blog-package.gradle')
    dependencies {
        compile project(":blog-api")
        compile project(":dw-common")
        testCompile project(":dw-test")

        compile "com.charlieknudsen.ribbon-ext:ribbon-retrofit:${ribbonExtVersion}"
        compile "com.charlieknudsen.ribbon-ext:ribbon-etcd:${ribbonExtVersion}"
        compile "com.charlieknudsen.ribbon-ext:etcd-client:${ribbonExtVersion}"
        compile "org.postgresql:postgresql:9.3-1100-jdbc41"
		compile "mysql:mysql-connector-java:5.1.31"
    }
}

project(':dw-common') {
    dependencies {
        compile "io.dropwizard:dropwizard-core:${dropwizardVersion}"
        compile "io.dropwizard:dropwizard-hibernate:${dropwizardVersion}"
        compile "io.dropwizard:dropwizard-migrations:${dropwizardVersion}"
        compile "io.dropwizard:dropwizard-assets:${dropwizardVersion}"
        compile "io.dropwizard:dropwizard-validation:${dropwizardVersion}"

        // http://forums.gradle.org/gradle/topics/receiving_a_java_lang_exceptionininitializererror_when_building_groovy_but_not_java_for_same_project?topic=receiving_a_java_lang_exceptionininitializererror_when_building_groovy_but_not_java_for_same_project
        compile "com.sun.jersey:jersey-client:1.18"
    }
}

project(':dw-test') {
    dependencies {
        compile project(":dw-common")
        compile "io.dropwizard:dropwizard-testing:${dropwizardVersion}"

        // Normally in the test scope, but since this is a test library these must be included in compile.
        compile "org.spockframework:spock-core:${spockVersion}"
        compile 'org.hamcrest:hamcrest-core:1.3'
        compile "ch.qos.logback:logback-classic:${logbackVersion}"
        compile 'org.slf4j:log4j-over-slf4j:1.7.2'
        compile 'com.h2database:h2:1.3.168'
    }
}

project(':helloworld-api') {
    group "${rootProject.group}.service"
    dependencies {

    }
}

project(':helloworld-client') {
    group "${rootProject.group}.service"
    dependencies {
        compile project(":helloworld-api")
    }
}

project(':helloworld-service') {
    group "${rootProject.group}.service"
    apply from: rootProject.file('gradle/service.gradle')
    dependencies {
        compile project(":helloworld-api")
        compile project(":dw-common")
        testCompile project(":dw-test")
    }
}
